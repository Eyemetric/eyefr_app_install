#!/usr/bin/env bash

set -euo pipefail
IFS=$'\n\t'

# Global variables
readonly APP_VER="{{app_ver}}"
readonly PODNAME="eyefr_gpu_${APP_VER}"
readonly APP_DIR="{{ app_dir }}"

readonly FRDB_IMAGE="docker.io/postgres:14.1"
readonly FR_API_IMAGE="docker.io/eyemetricfr/fr-api:${APP_VER}"
readonly CAM_SERVER_IMAGE="docker.io/eyemetricfr/cam-server:${APP_VER}"
readonly RTSP_WEBRTC_IMAGE="docker.io/eyemetricfr/rtsp-webrtc:${APP_VER}"

readonly PVDB_IMAGE="containers.paravision.ai/postgres/postgres:12.0"
readonly PROCESSOR_IMAGE="containers.paravision.ai/processor/processor:v6.0.0-gen5-balanced-tensorrt"
readonly IDENTITY_IMAGE="docker.io/eyemetricfr/identity:v4.0.0"
readonly STREAMING_IMAGE="containers.paravision.ai/streaming/streaming:v6.0.0-tensorrt"

# Logging function
log() {
    local level="$1"
    shift
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] [${level}] $*" >&2
}

# Error handling function
error_exit() {
    log "ERROR" "$1"
    exit "${2:-1}"
}

# Check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if a pod exists
pod_exists() {
    podman pod exists "${PODNAME}"
}

# Function to check if a container exists
container_exists() {
    podman container exists "$1"
}

# Function to wait for a container to be ready
wait_for_container() {
    local container="$1"
    local timeout="$2"
    local start_time
    start_time=$(date +%s)

    log "INFO" "Waiting for ${container} to be ready (timeout: ${timeout}s)..."
    while true; do
        if podman container inspect "${container}" &>/dev/null; then
            log "INFO" "${container} is ready."
            return 0
        fi

        local current_time
        current_time=$(date +%s)
        local elapsed=$((current_time - start_time))
        if [[ ${elapsed} -ge ${timeout} ]]; then
            error_exit "Timeout waiting for ${container}." 1
        fi

        log "INFO" "Waiting for ${container}... (${elapsed}s elapsed)"
        sleep 5
    done
}

# Function to start a container
start_container() {
    local container="$1"
    local image="$2"
    shift 2
    local args=("$@")

    if container_exists "${container}"; then
        log "INFO" "Container ${container} already exists. Skipping..."
        return 0
    fi

    log "INFO" "Starting ${container} container..."
    if ! podman run -d --name "${container}" --pod "${PODNAME}" "${args[@]}" "${image}"; then
        error_exit "Failed to start ${container}." 1
    fi
    log "INFO" "${container} started successfully."
}

start_pvdb_container() {

    local container="pvdb_gpu_${APP_VER}"
    local image="${PVDB_IMAGE}"
    local volume="${APP_DIR}/data/pvdb_pgdata/_data:/var/lib/postgresql/data:Z"

    start_container "${container}" "${image}" \
        --restart always \
        -e POSTGRES_USER=admin \
        -e POSTGRES_PASSWORD=admin \
        -e POSTGRES_DB=identity \
        -e TZ=EST \
        -v "${volume}"
}

start_pvproc_container() {

    local container="pvproc_gpu_${APP_VER}"
    local image="${PROCESSOR_IMAGE}"

    start_container "${container}" "${image}" \
        --restart always \
        --device nvidia.com/gpu=all \
        --security-opt label=disable \
        -e NVIDIA_VISIBLE_DEVICES=nvidia.com/gpu=all \
        -e NVIDIA_DRIVER_CAPABILITIES=all \
        -e TZ=EST \
        -e PV_HTTP_INTERFACE=on \
        -e PV_INFERENCE_WORKERS=1

}

start_pvident_container() {

    local image="${IDENTITY_IMAGE}"
    local container="pvident_gpu_${APP_VER}"
    local db="pvdb_gpu_${APP_VER}"

    wait_for_container "${db}" 60

    start_container "${container}" "${image}" \
        --restart always \
        -e TZ=EST \
        -e HTTP_PROXY=on \
        -e POSTGRES_URI=postgresql://admin:admin@localhost:5432/identity?sslmode=disable
}

start_pvstream_container() {

    local image="${STREAMING_IMAGE}"
    local container="pvstream_gpu_${APP_VER}"

    start_container "${container}" "${image}" \
        --restart always \
        --device nvidia.com/gpu=all \
        --security-opt label=disable \
        -e NVIDIA_VISIBLE_DEVICES=nvidia.com/gpu=all \
        -e NVIDIA_DRIVER_CAPABILITIES=all \
        -e TZ=EST \
        -e PV_INFERENCE_WORKERS=1 \
        -e PV_POSTPROCESSOR_WORKERS=1 \
        -e PV_OUTPUT_FACES_ONLY=true \
        -e PV_FACE_QUALITY_TRACKING=0.5 \
        --tmpfs /dev/shm:size=6g
}

start_frdb_container() {

    local image="${FRDB_IMAGE}"
    local container="frdb_gpu_${APP_VER}"
    local volume="${APP_DIR}/data/safr_pgdata/_data:/var/lib/postgresql/data:Z"

    start_container "${container}" "${image}" \
        -v "${volume}" \
        -e POSTGRES_USER=admin \
        -e POSTGRES_PASSWORD=admin \
        -e POSTGRES_DB=safr \
        -e TZ=EST
}

start_fr_api_container() {

    local image="${FR_API_IMAGE}"
    local container="frapi_gpu_${APP_VER}"

    start_container "${container}" "${image}" \
        -e SAFR_DB_ADDR=localhost \
        -e SAFR_DB_PORT=5433 \
        -e FR_BACKEND=pv \
        -e CV_URL=http://onprem-search-engine:7000 \
        -e PV_IDENT_URL=http://localhost:8080/v4 \
        -e PV_PROC_URL=http://localhost:8081/v6 \
        -e MIN_MATCH=0.5 \
        -e MATCH_EXPIRES=10 \
        -e MIN_QUALITY=0.8 \
        -e MIN_DUPE_MATCH=0.90 \
        -e TPASS_USER=admin \
        -e TPASS_PWD=njbs1968 \
        -e TPASS_ADDR=https://devsys01.tpassvms.com/TpassPVService/ \
        -e RUST_LOG=info \
        -e USE_TLS=false \
        -e TZ=EST
}

start_camserver_container() {

    local image="${CAM_SERVER_IMAGE}"
    local container="camserver_gpu_${APP_VER}"

    start_container "${container}" "${image}" \
        --restart always \
        -e FR_DB=localhost \
        -e FR_DB_PORT=5433 \
        -e FR_DB_USER=admin \
        -e FR_DB_PWD=admin \
        -e FR_API=http://localhost:3000 \
        -e CAM_SRV_MIN_MATCH=0.50 \
        -e CAM_SRV_MATCH_EXPIRES=10 \
        -e CAM_SRV_MIN_QUALITY=0.8 \
        -e CAM_SRV_MIN_DUPE_MATCH=0.98 \
        -e CAM_SRV_LOG_DETECTIONS=false \
        -e CAM_SRV_RETAIN_DETECTION_IMAGES=false \
        -e PV_ALERTS_URL=ws://localhost:5051 \
        -e PV_DETECTION_URL=ws://localhost:5050 \
        -e PV_STREAM_URL=http://localhost:5000 \
        -e RTSP_API_URL=http://demo:demo@localhost:8083 \
        -e RTSP_CAM_PROXY_URL=http://localhost:8083
}

start_rtsp_webrtc_container() {

    local image="${RTSP_WEBRTC_IMAGE}"
    local container="rtsp_webrtc_gpu_${APP_VER}"
    local volume="${APP_DIR}/config/rtsp-webrtc.json:/config/config.json:Z"

    start_container "${container}" "${image}" \
        --restart always \
        --network host \
        -v "${volume}"
}       
       

main() {
    # Check if NVIDIA GPU is ready
    if ! command_exists nvidia-smi || ! nvidia-smi > /dev/null 2>&1; then
        error_exit "NVIDIA GPU not ready or nvidia-smi not found" 1
    fi

    # Create the pod if it doesn't exist
    if ! pod_exists; then
        log "INFO" "Creating pod ${PODNAME}"
        podman pod create --name "${PODNAME}" -p 3000:3000 || error_exit "Failed to create pod" 1
    fi

    # Start containers
    start_pvdb_container
    start_pvproc_container
    start_pvident_container
    start_pvstream_container
    start_frdb_container
    start_fr_api_container
    start_camserver_container
    start_rtsp_webrtc_container

    log "INFO" "All containers started successfully"
}

main "$@"